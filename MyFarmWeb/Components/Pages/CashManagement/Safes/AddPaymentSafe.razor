@page "/add-payment-safe"
@page "/add-payment-safe/{Id:int}"
@layout Layout.EmptyLayout

@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IUnitOfWork unitofwork
@inject Service service
@inject PaymentSafeHeader paymentsafeheader

@inject SafeTransaction safetransaction
@inject MyFarmWeb.Data.MyFarmContext ContextDb
@inject IService jsservice
@inject IJSRuntime jsrun
@inject NavigationManager nv
@inject DialogService dialogservice
@using MyFarmWeb.Repository.Enums
@using TextCopy
@inject LayoutState layoutState
<title>مدفوع نقدي</title>

<RadzenAlert @ref="SaveAlert" Visible=@SaveSucces AllowClose="true" AlertStyle="@Alertstyle" Size="AlertSize.Small" Text=@SaveMessage />

<RadzenCard class="rz-my-6">

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="20" JustifyContent="JustifyContent.Center">
            <RadzenButton @ref="NewBtn" Text="جديد" Icon="add" Click="NewSafe"></RadzenButton>
            <RadzenButton @ref="SaveBtn" Text="حفظ" Icon="save" Click="SaveSafe"></RadzenButton>


            <RadzenButton Text="المدفوعات النقدية" Click="Safes"></RadzenButton>
        </RadzenStack>

    </RadzenStack>
</RadzenCard>
<RadzenCard class="rz-my-6">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenLabel>رقم المدفوع</RadzenLabel>
            <RadzenNumeric TValue="int" ReadOnly="true" @bind-Value="paymentsafeheader.PaymentSafeId" Style="margin-right:20px;" TextAlign="Radzen.TextAlign.Center"></RadzenNumeric>


           


            <RadzenLabel Component="DropDownDataGridBindValue">الخزينة</RadzenLabel>
            <RadzenStack Orientation="Orientation.Vertical" Style="width:50%;margin-right:40px;">
                <div @onkeydown="HandleKeydownSafe">
                    <RadzenDropDownDataGrid @ref="safecontrol" FocusFilterOnPopup="true" ShowSearch="false" SearchTextPlaceholder="بحث" Style="width:100%;"
                                            @bind-Value=@paymentsafeheader.SafeId Data=@safes AllowFilteringByAllStringColumns="true"
                                            TextProperty="@nameof(Safe.SafeName)" ValueProperty="@nameof(Safe.SafeId)" AllowFiltering="true" Name="DropDownDatacustomer">
                        <Columns>
                            <RadzenDropDownDataGridColumn Property="@nameof(Safe.SafeId)" Title="كود الخزينة" />
                            <RadzenDropDownDataGridColumn Property="@nameof(Safe.SafeName)" Title="اسم الخزينة" Width="100%" />
                        </Columns>
                    </RadzenDropDownDataGrid>
                    <RadzenAlert Visible=@SafeError AllowClose="false" AlertStyle="AlertStyle.Danger" Size="AlertSize.ExtraSmall" Text="يجب ادخال الخزينة" />

                </div>
            </RadzenStack>


            <RadzenLabel>التاريخ</RadzenLabel>
            <RadzenStack Orientation="Orientation.Vertical">

                <RadzenDatePicker @ref="Datecontrol" TValue="DateTime" Change="DateChange" @bind-Value="paymentsafeheader.Date" DateFormat="yyyy-MM-dd" style="text-align:center;"></RadzenDatePicker>
                <RadzenAlert Visible=@DateError AllowClose="false" AlertStyle="AlertStyle.Danger" Size="AlertSize.ExtraSmall" Text=@DateErrorMessage />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="12px" Style="margin-top:15px;">
        <RadzenLabel>الاجمالى</RadzenLabel>
        <RadzenNumeric TValue="decimal" ReadOnly="true" Name="total" Format="N3" @bind-Value=paymentsafeheader.Total TextAlign="Radzen.TextAlign.Center" Style="display: block;margin-right:20px;width:25%;" />

        <RadzenLabel>ملاحظات</RadzenLabel>

        <RadzenTextBox @onkeydown="HandleKeydownSafe" @bind-Value="paymentsafeheader.Notes" Style="display: block;width:50%;margin-right:15px" />
    </RadzenStack>
</RadzenCard>



<RadzenAlert Visible=@ItemsCountError AllowClose="false" AlertStyle="AlertStyle.Danger" Size="AlertSize.ExtraSmall" Text=@ItemCountErrorMessage />

<RadzenDataGrid @ref="ordersGrid" Style="width:100%;height:400px;" ColumnWidth="200px" AllowAlternatingRows="true" AllowFiltering="false" AllowPaging="false" AllowSorting="false" EditMode="@editMode"
                Data="@paymentsitemToSave" TItem="PaymentSafeDetails" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" EmptyText="لايوجد اي بيانات" AllowColumnPicking="true" ColumnsShowingText="اظهار الاعمدة"
                GridLines="DataGridGridLines.Both">
    <Columns>

        <RadzenDataGridColumn Title="العميل" Width="300px" Property="@nameof(PaymentSafeDetails.CustomerId)" TextAlign="Radzen.TextAlign.Center">
            <Template Context="order">
                @order.Customer?.CustomerName

            </Template>
            <EditTemplate Context="order">

                <div @onkeydown="HandleKeydownCustomerId">
                    <RadzenDropDown TValue="int?" @ref="CustomerIdControl" AllowClear=true Change="() => CustomerIdChange(order)" Style=@(CustomerIdError == true ? "margin-top:40px; display: block;text-align:center;" : "margin-top:0px; display: block;text-align:center;") Name="CustomerId" @bind-Value=order.CustomerId TextProperty="@nameof(Customer.CustomerName)" ValueProperty="@nameof(Customer.CustomerId)" Data=@Customers AllowFiltering="true" />
                </div>

                <RadzenAlert Visible=@CustomerIdError AllowClose="false" AlertStyle="AlertStyle.Danger" Size="AlertSize.ExtraSmall" Text="يجب ادخال عميل او مورد" />
            </EditTemplate>

        </RadzenDataGridColumn>

        <RadzenDataGridColumn Title="المورد" Width="300px" Property="@nameof(PaymentSafeDetails.VendorId)" TextAlign="Radzen.TextAlign.Center">
            <Template Context="order">
                @order.Vendor?.VendorName
            </Template>
            <EditTemplate Context="order">

                <div @onkeydown="HandleKeydownAccount">
                    <RadzenDropDown TValue="int?" @ref="AccountControl" AllowClear=true Change="() => VendorIdChange(order)" Style=@(AccountIdError == true ? "margin-top:40px; display: block;text-align:center;" : "margin-top:0px; display: block;text-align:center;") Name="VendorId" Data=@Vendors @bind-Value=order.VendorId TextProperty="@nameof(Vendor.VendorName)" ValueProperty="@nameof(Vendor.VendorId)" AllowFiltering="true" />
                </div>

                <RadzenAlert Visible=@AccountIdError AllowClose="false" AlertStyle="AlertStyle.Danger" Size="AlertSize.ExtraSmall" Text="يجب ادخال الحساب" />
            </EditTemplate>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn Property="@nameof(PaymentSafeDetails.Amount)" Title="المبلغ" TextAlign="Radzen.TextAlign.Center">
            <EditTemplate Context="order">
                <RadzenNumeric TValue="decimal" Min="0" @ref=AmountControl Change="ChangeAmount" Format="N3" Style=@(AmountError == true ? "margin-top:40px; display: block;" : "margin-top:0px;display:") Name="Price" @bind-Value=order.Amount TextAlign="Radzen.TextAlign.Center" />
                <RadzenAlert Visible=@AmountError AllowClose="false" AlertStyle="AlertStyle.Danger" Size="AlertSize.ExtraSmall" Text="يجب ادخال المبلغ" />
            </EditTemplate>
        </RadzenDataGridColumn>



        <RadzenDataGridColumn Property="@nameof(PaymentSafeDetails.Notes)" Width="300px" Title="ملاحظات" TextAlign="Radzen.TextAlign.Center">
            <EditTemplate Context="order">
                <RadzenTextBox Name="itemnote" @bind-Value="order.Notes" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Context="order" Filterable="false" Sortable="false" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="order">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate Context="order">
                <RadzenButton Icon="check" @ref=AddControl ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))" aria-label="Save" />
                @if (ordersToInsert.Count > 0)
                {
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(order))" aria-label="Cancel" />
                }
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(order))" aria-label="Delete" />

            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public int Id { get; set; }
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<PaymentSafeDetails> ordersToInsert = new List<PaymentSafeDetails>();
    List<PaymentSafeDetails> ordersToUpdate = new List<PaymentSafeDetails>();
    RadzenDataGrid<PaymentSafeDetails> ordersGrid;
    IEnumerable<Safe> safes;
    IEnumerable<NewFarm> farms;
    List<PaymentSafeDetails> paymentsitemToSave = new List<PaymentSafeDetails>();
   



    public List<AccountPublic> Accounts { get; set; } = new();
    List<AccountPublic> accountsType = new();

    //---------------------
    RadzenDropDownDataGrid<int> safecontrol;
    RadzenDropDownDataGrid<int> farmcontrol;
    RadzenDropDown<int?> AccountControl;
    RadzenDropDown<int?> CustomerIdControl;



    RadzenNumeric<decimal> AmountControl;


    RadzenDatePicker<DateTime> Datecontrol;

    RadzenButton NewBtn;
    RadzenButton SaveBtn;
    RadzenAlert SaveAlert;

    //-------------------------------
    AlertStyle Alertstyle;

    bool CustomerIdError = false;
    bool AccountIdError = false;

    bool SafeError = false;
    bool FarmError = false;
    bool AmountError = false;

    bool DateError = false;
    bool ItemsCountError = false;
    bool SaveSucces = false;


    string SaveMessage = "";
    string DateErrorMessage;
    string ItemCountErrorMessage;
    //----------------------------------
    RadzenButton AddControl;
    //-----------------


    public RadzenDataGrid<PaymentSafeDetails> paymentsgrid { get; set; }
    public IEnumerable<PaymentSafeDetails> SalesList { get; set; }
    public Customer SelectCustomer { get; set; }
    List<PaymentSafeDetails> paymentsSafeDetails = new();

    public _Year year { get; set; }

    public string UserId { get; set; }
    public PaymentSafeDetails ThisSafe { get; set; }
    public float Factory { get; set; }


    private int NumericValue { get; set; }
    private string PressedKey { get; set; }

    public IEnumerable<Customer> Customers { get; set; }
    public IEnumerable<Vendor> Vendors { get; set; }






    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InsertRow();


            await jsservice.setfocusbyid(() => safecontrol.UniqueID);
            if (Id > 0)
            {
                SaveBtn.Disabled = true;

            }
        }


        if (ordersToUpdate != null && ordersToUpdate.Count > 0)
        {

            await jsrun.InvokeVoidAsync("addKeydownListenerprice", AmountControl.UniqueID, DotNetObjectReference.Create(this));


        }


    }
    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        
        if (!await service.IsAuth())
        {
            nv.NavigateTo("/Account/Login");
            return;
        }
        UserId = await service.GetUserId();

        jsservice.JSRuntime = jsrun;

        farms = await unitofwork.NewFarm.GetAllAsync(f => f.UserId == UserId && f.Status == false, "Farm");
        safes = await unitofwork.Safe.GetAllAsync(v => v.UserId == UserId);
        Customers = await unitofwork.Customers.GetAllAsync(c => c.UserId == UserId);
        Vendors = await unitofwork.Vendors.GetAllAsync(c => c.UserId == UserId);
        year = unitofwork.Years.SelectOne(u => u.UserId == UserId && u.Status == false);


        if (Id > 0)
        {
            var payments = await unitofwork.PaymentSafeDetails.GetAllAsync(s => s.PaymentSafeId == Id, "Customer", "Vendor", "PaymentSafeHeader");

            paymentsitemToSave = payments.ToList();

            paymentsafeheader = paymentsitemToSave[0].PaymentSafeHeader;
            SaveBtn.Disabled = true;



        }
        else
        {
            paymentsafeheader.Date = DateTime.Now;
        }

        var menu = await unitofwork.MenuItems.GetAllAsync(m => m.ParentId == "6");
        if (menu != null)
        {
            layoutState.SetMenuItems(menu.ToList());
        }
    }


    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var order = new PaymentSafeDetails();
        ordersToInsert.Add(order);

        await ordersGrid.InsertRow(order);

        await jsrun.InvokeVoidAsync("addKeydownListenerItemIdFirstChild", CustomerIdControl.UniqueID, DotNetObjectReference.Create(this));

        await jsrun.InvokeVoidAsync("addKeydownListenerprice", AmountControl.UniqueID, DotNetObjectReference.Create(this));
        await jsservice.setfocusbyid(() => CustomerIdControl.UniqueID);

    }
    async void OnUpdateRow(PaymentSafeDetails order)
    {
        Reset(order);

        await jsrun.InvokeVoidAsync("addKeydownListenerItemIdFirstChild", CustomerIdControl.UniqueID, DotNetObjectReference.Create(this));
        await jsrun.InvokeVoidAsync("addKeydownListenerprice", AmountControl.UniqueID, DotNetObjectReference.Create(this));
        await jsservice.setfocusbyid(() => CustomerIdControl.UniqueID);
    }
    async void OnCreateRow(PaymentSafeDetails order)
    {


        if (paymentsitemToSave.Count > 0)
        {
            order.Moslsel = paymentsitemToSave.Max(p => p.Moslsel) + 1;
        }
        else
        {
            order.Moslsel = 1;
        }

        paymentsitemToSave.Add(order);
        ordersToInsert.Remove(order);

        ItemsCountError = false;
        await jsrun.InvokeVoidAsync("addKeydownListenerItemIdFirstChild", CustomerIdControl.UniqueID, DotNetObjectReference.Create(this));
        await jsrun.InvokeVoidAsync("addKeydownListenerprice", AmountControl.UniqueID, DotNetObjectReference.Create(this));
        await jsservice.setfocusbyid(() => CustomerIdControl.UniqueID);
    }
    void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(PaymentSafeDetails order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }
    async Task DeleteRow(PaymentSafeDetails order)
    {
        Reset(order);
        var item = paymentsitemToSave.FirstOrDefault(p => p.Moslsel == order.Moslsel);
        if (item != null)
        {
            paymentsitemToSave.Remove(order);
            await ordersGrid.Reload();
        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }
        int c = 1;
        foreach (var i in paymentsitemToSave)
        {

            i.Moslsel = c;
            c++;
        }
        paymentsafeheader.Total = paymentsitemToSave.Sum(p => p.Amount);

        await InsertRow();

        CustomerIdError = false;


        AmountError = false;
        ItemsCountError = false;

        await jsrun.InvokeVoidAsync("addKeydownListenerItemIdFirstChild", CustomerIdControl.UniqueID, DotNetObjectReference.Create(this));
        await jsrun.InvokeVoidAsync("addKeydownListenerprice", AmountControl.UniqueID, DotNetObjectReference.Create(this));
        await jsservice.setfocusbyid(() => CustomerIdControl.UniqueID);


    }
    async void CancelEdit(PaymentSafeDetails order)
    {

        if (ordersToInsert.Count > 0)
        {

            paymentsitemToSave.Remove(order);
            ordersGrid.CancelEditRow(order);
            await InsertRow();
            Reset(order);


            CustomerIdError = false;


            AmountError = false;
            ItemsCountError = false;

        }

        await jsrun.InvokeVoidAsync("addKeydownListenerItemIdFirstChild", CustomerIdControl.UniqueID, DotNetObjectReference.Create(this));
        await jsrun.InvokeVoidAsync("addKeydownListenerprice", AmountControl.UniqueID, DotNetObjectReference.Create(this));
        await jsservice.setfocusbyid(() => CustomerIdControl.UniqueID);


    }
    async Task SaveRow(PaymentSafeDetails order)
    {
        if ((order.CustomerId is null || order.CustomerId <= 0) && (order.VendorId is null || order.VendorId <= 0))
        {
            CustomerIdError = true;
            await jsservice.setfocusbyid(() => CustomerIdControl.UniqueID);
            return;
        }
        else
        {
            CustomerIdError = false;
        }


        if (order.Amount == 0)
        {
            AmountError = true;
            await jsservice.SelectAllTextToFisrtChild(() => AmountControl.UniqueID);

            return;
        }
        else
        {
            AmountError = false;
        }

        //---------------------------------


        var customer = Customers.FirstOrDefault(c => c.CustomerId == order.CustomerId);
        var vendor = Vendors.FirstOrDefault(c => c.VendorId == order.VendorId);

        order.Customer = customer;
        order.Vendor = vendor;


        await ordersGrid.UpdateRow(order);
        await InsertRow();



        await jsrun.InvokeVoidAsync("addKeydownListenerItemIdFirstChild", CustomerIdControl.UniqueID, DotNetObjectReference.Create(this));
        await jsrun.InvokeVoidAsync("addKeydownListenerprice", AmountControl.UniqueID, DotNetObjectReference.Create(this));
        await jsservice.setfocusbyid(() => CustomerIdControl.UniqueID);
    }


    async Task EditRow(PaymentSafeDetails order)
    {
        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);

        await ordersGrid.EditRow(order);
        await ordersGrid.Reload();

        CustomerIdError = false;
        AmountError = false;
        await jsrun.InvokeVoidAsync("addKeydownListenerItemIdFirstChild", CustomerIdControl.UniqueID, DotNetObjectReference.Create(this));
        await jsrun.InvokeVoidAsync("addKeydownListenerprice", AmountControl.UniqueID, DotNetObjectReference.Create(this));
        await jsservice.setfocusbyid(() => CustomerIdControl.UniqueID);


        if (order.VendorId is not null && order.VendorId > 0)
        {
            CustomerIdControl.Disabled = true;
            CustomerIdControl.SelectedItem = null;

        }

        if (order.CustomerId is not null && order.CustomerId > 0)
        {
            AccountControl.Disabled = true;
            AccountControl.SelectedItem = null;

        }
    }

    async void NewSafe()
    {
        SaveBtn.Disabled = false;

        paymentsafeheader = new();
        paymentsSafeDetails.Clear();
        paymentsitemToSave.Clear();
        safetransaction = new();
        paymentsafeheader.Date = DateTime.Now;
        if (safes != null)
        {
            //  paymentsafeheader.SafeId = safes.FirstOrDefault().SafeId;
            // paymentsafeheader.FarmId = farms.FirstOrDefault().NewFarmId;

            safecontrol.SelectedItem = null;
            farmcontrol.SelectedItem = null;

        }


        await ordersGrid.Reload();
        await InsertRow();

        ResetErrors();
        await jsrun.InvokeVoidAsync("addKeydownListenerItemIdFirstChild", CustomerIdControl.UniqueID, DotNetObjectReference.Create(this));
        await jsrun.InvokeVoidAsync("addKeydownListenerprice", AmountControl.UniqueID, DotNetObjectReference.Create(this));
        await jsservice.setfocusbyid(() => CustomerIdControl.UniqueID);

    }
    async void SaveSafe()
    {

        // if (paymentsafeheader.FarmId <= 0)
        // {
        //     FarmError = true;
        //     return;
        // }
        // else
        // {
        //     FarmError = false;
        // }
        if (paymentsafeheader.SafeId <= 0)
        {
            SafeError = true;
            return;
        }
        else
        {
            SafeError = false;
        }
        // if (paymentsafeheader.Date.Year != year.YearName)
        // {
        //     DateError = true;
        //     DateErrorMessage = "يجب ان يكون تاريخ المدفوع فى نفس العام المالى";
        //     return;
        // }
        // else
        // {
        //     DateError = false;
        // }
        if (paymentsitemToSave.Count == 0)
        {
            ItemsCountError = true;
            ItemCountErrorMessage = "يجب ادخال مدفوع على الاقل ";
            return;

        }
        else
        {
            ItemsCountError = false;
        }
        if (ordersToInsert.Count != 0)
        {
            if (ordersToInsert.Count > 0 && ordersToInsert[0].CustomerId > 0 || ordersToInsert[0].VendorId > 0 || ordersToInsert[0].Amount > 0)
            {
                ItemsCountError = true;
                ItemCountErrorMessage = "هناك مدفوع فى وضع التحرير يجب الغاءه او اضافته";
                return;

            }
            else
            {
                ItemsCountError = false;
            }
        }
        if (ordersToUpdate.Count != 0)
        {
            if (ordersToUpdate.Count > 0 && ordersToUpdate[0].CustomerId > 0 || ordersToUpdate[0].VendorId > 0 || ordersToUpdate[0].Amount > 0)
            {
                ItemsCountError = true;
                ItemCountErrorMessage = "هناك مدفوع فى وضع التحرير يجب الغاءه او اضافته";
                return;

            }
            else
            {
                ItemsCountError = false;
            }
        }




        using (ContextDb.Database.BeginTransaction())
        {
            try
            {
                DateTime CreateDate = DateTime.Now;
                //insert to payments header
                int receipid = unitofwork.PaymentSafeHeader.GetMaxId(s => s.PaymentSafeId) + 1;
                paymentsafeheader.PaymentSafeId = receipid;
                paymentsafeheader.UserId = UserId;
                paymentsafeheader.Year = year.Year;
                paymentsafeheader.CreateDate = CreateDate;

                ContextDb.PaymentSafeHeader.Add(paymentsafeheader);

                //insert to payments details


                foreach (var payment in paymentsitemToSave)
                {
                    payment.PaymentSafeId = receipid;

                    paymentsSafeDetails.Add(payment.Clone());


                }

                ContextDb.PaymentSafeDetails.AddRange(paymentsSafeDetails);


                // insert in customer Or vendor transaction

                foreach (var item in paymentsSafeDetails)
                {

                    if (item.CustomerId > 0)
                    {
                        CustomerTransaction customertransaction = new();
                        customertransaction.CustomerId = (int)item.CustomerId;
                        customertransaction.DocumentTypeId = (int)DocumentTypesEnum.PaymentSafe;
                        customertransaction.DocumentId = paymentsafeheader.PaymentSafeId;
                        customertransaction.Value = item.Amount;
                        customertransaction.UserId = paymentsafeheader.UserId;
                        customertransaction.Year = paymentsafeheader.Year;
                        customertransaction.TransactionDate = paymentsafeheader.Date;
                        customertransaction.CreateDate = CreateDate;

                        ContextDb.CustomerTransactions.Add(customertransaction);
                    }

                    if (item.VendorId > 0)
                    {
                        VendorTransaction vendortransaction = new();

                        vendortransaction.VendorId = (int)item.VendorId;
                        vendortransaction.DocumentTypeId = (int)DocumentTypesEnum.PaymentSafe;
                        vendortransaction.DocumentId = paymentsafeheader.PaymentSafeId;
                        vendortransaction.Value = item.Amount;
                        vendortransaction.UserId = paymentsafeheader.UserId;
                        vendortransaction.Year = paymentsafeheader.Year;
                        vendortransaction.TransactionDate = paymentsafeheader.Date;
                        vendortransaction.CreateDate = CreateDate;

                        ContextDb.VendorTransactions.Add(vendortransaction);
                    }


                }


                // insert in safe transaction
                safetransaction.SafeId = paymentsafeheader.SafeId;
                safetransaction.DocumentTypeId = (int)DocumentTypesEnum.PaymentSafe;
                safetransaction.DocumentId = paymentsafeheader.PaymentSafeId;
                safetransaction.Value = paymentsafeheader.Total * -1;
                safetransaction.UserId = paymentsafeheader.UserId;
                safetransaction.Year = paymentsafeheader.Year;
                safetransaction.TransactionDate = paymentsafeheader.Date;
                safetransaction.CreateDate = CreateDate;
                ContextDb.SafeTransactions.Add(safetransaction);

                ContextDb.SaveChanges();
                ContextDb.Database.CommitTransaction();
                SaveBtn.Disabled = true;
                SaveSucces = true;
                SaveMessage = $"تم الحفظ بنجاح رقم المدفوع {paymentsafeheader.PaymentSafeId} ";

                Alertstyle = AlertStyle.Success;
                Thread t1 = new Thread(new ThreadStart(Closemessage));
                t1.Start();

                CustomerIdError = false;


                AmountError = false;
                ItemsCountError = false;

            }
            catch (Exception ex)
            {

                ContextDb.Database.RollbackTransaction();
                SaveSucces = true;
                SaveMessage = $"حدث خطأ  {ex.Message} ";
                paymentsafeheader.PaymentSafeId = 0;
                Alertstyle = AlertStyle.Danger;

            }

        }


    }


    void ChangeAmount()
    {
        if (ordersToInsert.Count > 0)
        {
            paymentsafeheader.Total = paymentsitemToSave.Sum(s => s.Amount) + ordersToInsert[0].Amount;
        }
        if (ordersToUpdate.Count > 0)
        {
            paymentsafeheader.Total = paymentsitemToSave.Sum(s => s.Amount);
        }
    }
    void DateChange()
    {
        if (paymentsafeheader.Date.Year == year.YearName)
        {
            DateError = false;
        }
    }

    void ResetErrors()
    {

        CustomerIdError = false;


        AmountError = false;

        DateError = false;
        ItemsCountError = false;


        SaveSucces = false;

    }
    void Closemessage()
    {

        Thread.Sleep(5000);
        SaveSucces = false;
        ResetErrors();
        InvokeAsync(() => this.StateHasChanged());

    }
    void customerkeydown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            jsservice.setfocusbyid(() => Datecontrol.UniqueID);
        }
    }





    void Safes()
    {
        nv.NavigateTo("payment_safe_report_selector");
    }

    void CustomerIdChange(PaymentSafeDetails order)
    {

        if (order.CustomerId is not null && order.CustomerId > 0)
        {
            AccountControl.Disabled = true;
            AccountControl.SelectedItem = null;
            CustomerIdError = false;

        }
        else
        {
            AccountControl.Disabled = false;

        }
    }
    void VendorIdChange(PaymentSafeDetails order)
    {
        if (order.VendorId is not null && order.VendorId > 0)
        {
            CustomerIdControl.Disabled = true;
            CustomerIdControl.SelectedItem = null;
            CustomerIdError = false;


        }
        else
        {
            CustomerIdControl.Disabled = false;

        }
    }

    public async void HandleKeydownFarm(KeyboardEventArgs e)

    {
        if (e.Key == "Enter")
        {

            await jsservice.setfocusbyid(() => safecontrol.UniqueID);
        }

    }


    public async void HandleKeydownSafe(KeyboardEventArgs e)

    {
        if (e.Key == "Enter")
        {

            await jsservice.setfocusbyid(() => CustomerIdControl.UniqueID);
        }

    }

    public async void HandleKeydownCustomerId(KeyboardEventArgs e)

    {
        if (e.Key == "Enter")
        {

            await jsservice.setfocusbyid(() => AccountControl.UniqueID);
        }


    }

    public async void HandleKeydownAccount(KeyboardEventArgs e)

    {
        if (e.Key == "Enter")
        {

            await jsservice.SelectAllTextToFisrtChild(() => AmountControl.UniqueID);
        }

    }

    [JSInvokable]
    public async void HandleKeydownItemIDFirstChild(string key)

    {
        if (key == "Enter")
        {

            await jsservice.setfocusbyidtofirstchild(() => AccountControl.UniqueID);
        }

    }

    [JSInvokable]
    public async void HandleKeydownPrice(string key)
    {
        if (key == "Enter")
        {

            await jsservice.setfocusbyid(() => AddControl.UniqueID);

        }

    }

}

