@inject Service service
@rendermode InteractiveServer
@inject IUnitOfWork unitofwork
<RadzenStack Orientation="Orientation.Vertical" Style="width:50%;margin-right:40px;">
    <div @onkeydown=HandleKeydownCustomer>
        <RadzenDropDownDataGrid Placeholder="اختر العميل..." @ref="customercontrol" FocusFilterOnPopup="true" ShowSearch="false" Change="vendorchange" SearchTextPlaceholder="بحث" Style="width:100%;"
                                Value="this.Value" TValue="int" ValueChanged=@this.ValueChanged Data=@Customers AllowFilteringByAllStringColumns="true"
                                AllowClear=true TextProperty="@nameof(Customer.CustomerName)" ValueProperty="@nameof(Customer.CustomerId)" AllowFiltering="true" Name="DropDownDatavendor">
            <Columns>
                <RadzenDropDownDataGridColumn Property="@nameof(Customer.CustomerId)" Title="كود العميل" />
                <RadzenDropDownDataGridColumn Property="@nameof(Customer.CustomerName)" Title="اسم العميل" Width="100%" />
            </Columns>
        </RadzenDropDownDataGrid>
        <RadzenAlert Visible=@CustomerError AllowClose="false" AlertStyle="AlertStyle.Danger" Size="AlertSize.ExtraSmall" Text="يجب ادخال العميل" />

    </div>
</RadzenStack>
@code {
    [Parameter]
    public int Value { get; set; }
    [Parameter]
    public IService jsservice { get; set; }

    [Parameter]
    public string TabToControlUniqeId { get; set; }
    [Parameter]
    public bool CustomerError { get; set; }

    [Parameter]
    public int CustomerId { get; set; }
    IEnumerable<Customer> Customers;
    [Parameter]
    public RadzenDropDownDataGrid<int> customercontrol { get; set; }
    public string UserId { get; set; }
    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }
    protected override async Task OnInitializedAsync()
    {
        UserId = await service.GetUserId();
        Customers = await unitofwork.Customers.GetAllAsync(v => v.UserId == UserId);
    }
    public async void HandleKeydownCustomer(KeyboardEventArgs e)

    {
        if (e.Key == "Enter")
        {

            await jsservice.SelectAllTextToFisrtChild(() => TabToControlUniqeId);
        }

    }
    private async Task OnValueChanged(int value) => await this.ValueChanged.InvokeAsync(value);

    void vendorchange()
    {
        if (CustomerId > 0)
        {
            CustomerError = false;
        }
    }

}
